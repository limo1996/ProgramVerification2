field f: Int
field g: Int

method test01(x: Ref, b: Bool)
  requires acc(x.f, b ? write : none)
{
  assert b || forperm[f] y :: false

  assert (forperm[f] y :: false) ==> (forperm[f] y :: true)
  assert (forperm[f] y :: false) ==> !b

  //:: ExpectedOutput(assert.failed:assertion.false)
  assert forperm[f] y :: false
}

method test01b(x: Ref, b: Bool)
  requires b ==> acc(x.f)
{
  assert b || forperm[f] y :: false

  assert (forperm[f] y :: false) ==> (forperm[f] y :: true)

  assert (forperm[f] y :: false) ==> !b

  //:: ExpectedOutput(assert.failed:assertion.false)
  assert forperm[f] y :: false
}

method test02(x: Ref, b1: Bool, b2: Bool)
  requires acc(x.f, 1/5)
{
  assert forperm[f,g] y :: y != null
}

method test03(x: Ref, b1: Bool, b2: Bool)
  requires acc(x.f, 1/5)
{
  var a1: Int := x.f

  inhale acc(x.f, 4/5)
  x.f := a1 + 1

  assert forperm[g] y :: y.f > a1

  //:: ExpectedOutput(assert.failed:insufficient.permission)
  assert forperm[f] y :: y.g > y.g - 1
}

method test04(x: Ref, b1: Bool, b2: Bool)
  requires acc(x.f, 1/5)
{
  var a1: Int := x.f

  inhale acc(x.f, 4/5)
  x.f := a1 + 1

  assert forperm[f] y :: y.f > a1

  assert forperm[f] y :: y.f > old(y.f)

  assert forperm[f,g] y :: old(y.f) <= old(y.f)
}

